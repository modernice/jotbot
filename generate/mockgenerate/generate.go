// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mockgenerate

import (
	"sync"

	generate "github.com/modernice/jotbot/generate"
)

// MockMinifier is a mock implementation of the Minifier interface (from the
// package github.com/modernice/jotbot/generate) used for unit testing.
type MockMinifier struct {
	// MinifyFunc is an instance of a mock function object controlling the
	// behavior of the method Minify.
	MinifyFunc *MinifierMinifyFunc
}

// NewMockMinifier creates a new mock of the Minifier interface. All methods
// return zero values for all results, unless overwritten.
func NewMockMinifier() *MockMinifier {
	return &MockMinifier{
		MinifyFunc: &MinifierMinifyFunc{
			defaultHook: func([]byte) (r0 []byte, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockMinifier creates a new mock of the Minifier interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockMinifier() *MockMinifier {
	return &MockMinifier{
		MinifyFunc: &MinifierMinifyFunc{
			defaultHook: func([]byte) ([]byte, error) {
				panic("unexpected invocation of MockMinifier.Minify")
			},
		},
	}
}

// NewMockMinifierFrom creates a new mock of the MockMinifier interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockMinifierFrom(i generate.Minifier) *MockMinifier {
	return &MockMinifier{
		MinifyFunc: &MinifierMinifyFunc{
			defaultHook: i.Minify,
		},
	}
}

// MinifierMinifyFunc describes the behavior when the Minify method of the
// parent MockMinifier instance is invoked.
type MinifierMinifyFunc struct {
	defaultHook func([]byte) ([]byte, error)
	hooks       []func([]byte) ([]byte, error)
	history     []MinifierMinifyFuncCall
	mutex       sync.Mutex
}

// Minify delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMinifier) Minify(v0 []byte) ([]byte, error) {
	r0, r1 := m.MinifyFunc.nextHook()(v0)
	m.MinifyFunc.appendCall(MinifierMinifyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Minify method of the
// parent MockMinifier instance is invoked and the hook queue is empty.
func (f *MinifierMinifyFunc) SetDefaultHook(hook func([]byte) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Minify method of the parent MockMinifier instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *MinifierMinifyFunc) PushHook(hook func([]byte) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MinifierMinifyFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func([]byte) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MinifierMinifyFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func([]byte) ([]byte, error) {
		return r0, r1
	})
}

func (f *MinifierMinifyFunc) nextHook() func([]byte) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MinifierMinifyFunc) appendCall(r0 MinifierMinifyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MinifierMinifyFuncCall objects describing
// the invocations of this function.
func (f *MinifierMinifyFunc) History() []MinifierMinifyFuncCall {
	f.mutex.Lock()
	history := make([]MinifierMinifyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MinifierMinifyFuncCall is an object that describes an invocation of
// method Minify on an instance of MockMinifier.
type MinifierMinifyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MinifierMinifyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MinifierMinifyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockService is a mock implementation of the Service interface (from the
// package github.com/modernice/jotbot/generate) used for unit testing.
type MockService struct {
	// GenerateDocFunc is an instance of a mock function object controlling
	// the behavior of the method GenerateDoc.
	GenerateDocFunc *ServiceGenerateDocFunc
}

// NewMockService creates a new mock of the Service interface. All methods
// return zero values for all results, unless overwritten.
func NewMockService() *MockService {
	return &MockService{
		GenerateDocFunc: &ServiceGenerateDocFunc{
			defaultHook: func(generate.Context) (r0 string, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockService creates a new mock of the Service interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockService() *MockService {
	return &MockService{
		GenerateDocFunc: &ServiceGenerateDocFunc{
			defaultHook: func(generate.Context) (string, error) {
				panic("unexpected invocation of MockService.GenerateDoc")
			},
		},
	}
}

// NewMockServiceFrom creates a new mock of the MockService interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockServiceFrom(i generate.Service) *MockService {
	return &MockService{
		GenerateDocFunc: &ServiceGenerateDocFunc{
			defaultHook: i.GenerateDoc,
		},
	}
}

// ServiceGenerateDocFunc describes the behavior when the GenerateDoc method
// of the parent MockService instance is invoked.
type ServiceGenerateDocFunc struct {
	defaultHook func(generate.Context) (string, error)
	hooks       []func(generate.Context) (string, error)
	history     []ServiceGenerateDocFuncCall
	mutex       sync.Mutex
}

// GenerateDoc delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockService) GenerateDoc(v0 generate.Context) (string, error) {
	r0, r1 := m.GenerateDocFunc.nextHook()(v0)
	m.GenerateDocFunc.appendCall(ServiceGenerateDocFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GenerateDoc method
// of the parent MockService instance is invoked and the hook queue is
// empty.
func (f *ServiceGenerateDocFunc) SetDefaultHook(hook func(generate.Context) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GenerateDoc method of the parent MockService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceGenerateDocFunc) PushHook(hook func(generate.Context) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceGenerateDocFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(generate.Context) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceGenerateDocFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(generate.Context) (string, error) {
		return r0, r1
	})
}

func (f *ServiceGenerateDocFunc) nextHook() func(generate.Context) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceGenerateDocFunc) appendCall(r0 ServiceGenerateDocFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceGenerateDocFuncCall objects
// describing the invocations of this function.
func (f *ServiceGenerateDocFunc) History() []ServiceGenerateDocFuncCall {
	f.mutex.Lock()
	history := make([]ServiceGenerateDocFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceGenerateDocFuncCall is an object that describes an invocation of
// method GenerateDoc on an instance of MockService.
type ServiceGenerateDocFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 generate.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceGenerateDocFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceGenerateDocFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
