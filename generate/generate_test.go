package generate_test

import (
	"context"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"testing"

	"github.com/modernice/jotbot/generate"
	"github.com/modernice/jotbot/internal"
	igen "github.com/modernice/jotbot/internal/generate"
	"github.com/modernice/jotbot/internal/tests"
)

func mockService(repo fs.FS) (*igen.Service, []generate.Generation) {
	svc := igen.MockService().
		WithDoc("operations.go", "Add", "Add adds numbers together.").
		WithDoc("operations.go", "Sub", "Sub subtracts numbers.").
		WithDoc("operations.go", "Mul", "Mul multiplies numbers.").
		WithDoc("operations.go", "Div", "Div divides numbers.")
	return svc, []generate.Generation{
		{
			File:       "operations.go",
			Identifier: "Add",
			Doc:        "Add adds numbers together.",
		},
		{
			File:       "operations.go",
			Identifier: "Sub",
			Doc:        "Sub subtracts numbers.",
		},
		{
			File:       "operations.go",
			Identifier: "Mul",
			Doc:        "Mul multiplies numbers.",
		},
		{
			File:       "operations.go",
			Identifier: "Div",
			Doc:        "Div divides numbers.",
		},
	}
}

func TestGenerator_Generate(t *testing.T) {
	t.SkipNow()

	root := filepath.Join(tests.Must(os.Getwd()), "testdata", "gen", "calculator")
	tests.WithRepo("calculator", root, func(repoFS fs.FS) {
		svc, want := mockService(repoFS)
		g := generate.New(svc)

		gens, errs, err := g.Generate(context.Background(), repoFS)
		if err != nil {
			t.Fatalf("Generate() should not return an error; got %q", err)
		}

		result := generate.Flatten(drain(t, gens, errs))

		tests.ExpectGenerations(t, want, result)
	})
}

func TestGenerator_Generate_duplicateName(t *testing.T) {
	t.SkipNow()

	root := filepath.Join(tests.Must(os.Getwd()), "testdata", "gen", "duplicate-name")

	tests.WithRepo("duplicate-name", root, func(repoFS fs.FS) {
		svc := igen.MockService()
		svc.WithDoc("foo.go", "Foo", "Foo is a function.")
		svc.WithDoc("foo.go", "X", "X is a struct.")
		svc.WithDoc("foo.go", "X.Foo", "Foo is a method of X.")
		svc.WithDoc("foo.go", "Y", "Y is a struct.")
		svc.WithDoc("foo.go", "*Y.Foo", "Foo is a method of *Y.")

		g := generate.New(svc)

		gens, errs, err := g.Generate(context.Background(), repoFS)
		if err != nil {
			t.Fatalf("Generate() should not return an error; got %q", err)
		}

		result := generate.Flatten(drain(t, gens, errs))

		tests.ExpectGenerations(t, svc.Generations(), result)
	})
}

func TestFooter(t *testing.T) {
	t.SkipNow()

	root := filepath.Join(tests.Must(os.Getwd()), "testdata", "gen", "footer")
	tests.WithRepo("calculator", root, func(repoFS fs.FS) {
		svc, want := mockService(repoFS)

		for i, gen := range want {
			gen.Doc = fmt.Sprintf("%s\n\nGenerated by jotbot.", gen.Doc)
			want[i] = gen
		}

		g := generate.New(svc)

		gens, errs, err := g.Generate(context.Background(), repoFS, generate.Footer("Generated by jotbot."))
		if err != nil {
			t.Fatalf("Generate() should not return an error; got %q", err)
		}

		result := generate.Flatten(drain(t, gens, errs))

		tests.ExpectGenerations(t, want, result)
	})
}

func drain[T any](t *testing.T, vals <-chan T, errs <-chan error) []T {
	t.Helper()

	out, err := internal.Drain(vals, errs)
	if err != nil {
		t.Fatalf("drain generations: %v", err)
	}
	return out
}
